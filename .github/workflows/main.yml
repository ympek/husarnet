name: Build & test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Prepare build
        run: ./util/build-prepare.sh
        
      - name: Build for all platforms and archs
        run: ./util/build-all.sh
        
      - name: Prepare tests
        run: ./util/test-prepare.sh
        
      - name: Run UTs
        run: ./util/test-unit.sh
        
      - name: Run static analysis (cppcheck)
        run: ./util/test-cppcheck.sh

  push_docker_images:
    runs-on: ubuntu-latest
  
    steps:
      # looks like checkout is not needed and buildkit will handle it
    
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.HNETUSER_DOCKERHUB_LOGIN }}
          password: ${{ secrets.HNETUSER_DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./unix/docker-misc/Dockerfile
          platforms: linux/arm64, linux/amd64, linux/arm/v7
          push: true
          tags: husarnet/priv_ci
          
          # maybe let's disable cache first
          #cache-from: type=registry,ref=husarion/rosbot
          #cache-to: type=inline
          
